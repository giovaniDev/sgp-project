// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package db

import (
	"context"
	"time"
)

const createCall = `-- name: CreateCall :one
INSERT INTO calls (origin, destination, part_number, operation, employee_id, setup, urgent, closed_at, qual_description, qual_check_id, qual_check_datetime_at, eng_description, eng_check_id, eng_check_datetime_at, log_description, log_check_id, log_check_datetime_at, man_description, man_check_id, man_check_datetime_at, company) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21) RETURNING id_call, origin, destination, part_number, operation, employee_id, setup, urgent, created_at, closed_at, qual_description, qual_check_id, qual_check_datetime_at, eng_description, eng_check_id, eng_check_datetime_at, log_description, log_check_id, log_check_datetime_at, man_description, man_check_id, man_check_datetime_at, company
`

type CreateCallParams struct {
	Origin              int32     `json:"origin"`
	Destination         int32     `json:"destination"`
	PartNumber          string    `json:"part_number"`
	Operation           int32     `json:"operation"`
	EmployeeID          int32     `json:"employee_id"`
	Setup               bool      `json:"setup"`
	Urgent              bool      `json:"urgent"`
	ClosedAt            time.Time `json:"closed_at"`
	QualDescription     string    `json:"qual_description"`
	QualCheckID         int32     `json:"qual_check_id"`
	QualCheckDatetimeAt time.Time `json:"qual_check_datetime_at"`
	EngDescription      string    `json:"eng_description"`
	EngCheckID          int32     `json:"eng_check_id"`
	EngCheckDatetimeAt  time.Time `json:"eng_check_datetime_at"`
	LogDescription      string    `json:"log_description"`
	LogCheckID          int32     `json:"log_check_id"`
	LogCheckDatetimeAt  time.Time `json:"log_check_datetime_at"`
	ManDescription      string    `json:"man_description"`
	ManCheckID          int32     `json:"man_check_id"`
	ManCheckDatetimeAt  time.Time `json:"man_check_datetime_at"`
	Company             string    `json:"company"`
}

func (q *Queries) CreateCall(ctx context.Context, arg CreateCallParams) (Call, error) {
	row := q.db.QueryRowContext(ctx, createCall,
		arg.Origin,
		arg.Destination,
		arg.PartNumber,
		arg.Operation,
		arg.EmployeeID,
		arg.Setup,
		arg.Urgent,
		arg.ClosedAt,
		arg.QualDescription,
		arg.QualCheckID,
		arg.QualCheckDatetimeAt,
		arg.EngDescription,
		arg.EngCheckID,
		arg.EngCheckDatetimeAt,
		arg.LogDescription,
		arg.LogCheckID,
		arg.LogCheckDatetimeAt,
		arg.ManDescription,
		arg.ManCheckID,
		arg.ManCheckDatetimeAt,
		arg.Company,
	)
	var i Call
	err := row.Scan(
		&i.IDCall,
		&i.Origin,
		&i.Destination,
		&i.PartNumber,
		&i.Operation,
		&i.EmployeeID,
		&i.Setup,
		&i.Urgent,
		&i.CreatedAt,
		&i.ClosedAt,
		&i.QualDescription,
		&i.QualCheckID,
		&i.QualCheckDatetimeAt,
		&i.EngDescription,
		&i.EngCheckID,
		&i.EngCheckDatetimeAt,
		&i.LogDescription,
		&i.LogCheckID,
		&i.LogCheckDatetimeAt,
		&i.ManDescription,
		&i.ManCheckID,
		&i.ManCheckDatetimeAt,
		&i.Company,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id_user, name_user, sector, company) VALUES ($1, $2, $3, $4) RETURNING id_user, name_user, sector, company
`

type CreateUserParams struct {
	IDUser   int32  `json:"id_user"`
	NameUser string `json:"name_user"`
	Sector   string `json:"sector"`
	Company  string `json:"company"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.IDUser,
		arg.NameUser,
		arg.Sector,
		arg.Company,
	)
	var i User
	err := row.Scan(
		&i.IDUser,
		&i.NameUser,
		&i.Sector,
		&i.Company,
	)
	return i, err
}

const getAllCalls = `-- name: GetAllCalls :many
SELECT id_call, origin, destination, part_number, operation, employee_id, setup, urgent, created_at, closed_at, qual_description, qual_check_id, qual_check_datetime_at, eng_description, eng_check_id, eng_check_datetime_at, log_description, log_check_id, log_check_datetime_at, man_description, man_check_id, man_check_datetime_at, company FROM calls WHERE company = $1 ORDER BY id_call DESC
`

func (q *Queries) GetAllCalls(ctx context.Context, company string) ([]Call, error) {
	rows, err := q.db.QueryContext(ctx, getAllCalls, company)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Call
	for rows.Next() {
		var i Call
		if err := rows.Scan(
			&i.IDCall,
			&i.Origin,
			&i.Destination,
			&i.PartNumber,
			&i.Operation,
			&i.EmployeeID,
			&i.Setup,
			&i.Urgent,
			&i.CreatedAt,
			&i.ClosedAt,
			&i.QualDescription,
			&i.QualCheckID,
			&i.QualCheckDatetimeAt,
			&i.EngDescription,
			&i.EngCheckID,
			&i.EngCheckDatetimeAt,
			&i.LogDescription,
			&i.LogCheckID,
			&i.LogCheckDatetimeAt,
			&i.ManDescription,
			&i.ManCheckID,
			&i.ManCheckDatetimeAt,
			&i.Company,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCall = `-- name: GetCall :one
SELECT id_call, origin, destination, part_number, operation, employee_id, setup, urgent, created_at, closed_at, qual_description, qual_check_id, qual_check_datetime_at, eng_description, eng_check_id, eng_check_datetime_at, log_description, log_check_id, log_check_datetime_at, man_description, man_check_id, man_check_datetime_at, company FROM calls WHERE id_call = $1 AND company = $2
`

type GetCallParams struct {
	IDCall  int64  `json:"id_call"`
	Company string `json:"company"`
}

func (q *Queries) GetCall(ctx context.Context, arg GetCallParams) (Call, error) {
	row := q.db.QueryRowContext(ctx, getCall, arg.IDCall, arg.Company)
	var i Call
	err := row.Scan(
		&i.IDCall,
		&i.Origin,
		&i.Destination,
		&i.PartNumber,
		&i.Operation,
		&i.EmployeeID,
		&i.Setup,
		&i.Urgent,
		&i.CreatedAt,
		&i.ClosedAt,
		&i.QualDescription,
		&i.QualCheckID,
		&i.QualCheckDatetimeAt,
		&i.EngDescription,
		&i.EngCheckID,
		&i.EngCheckDatetimeAt,
		&i.LogDescription,
		&i.LogCheckID,
		&i.LogCheckDatetimeAt,
		&i.ManDescription,
		&i.ManCheckID,
		&i.ManCheckDatetimeAt,
		&i.Company,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id_user, name_user, sector, company FROM users WHERE id_user = $1
`

func (q *Queries) GetUser(ctx context.Context, idUser int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, idUser)
	var i User
	err := row.Scan(
		&i.IDUser,
		&i.NameUser,
		&i.Sector,
		&i.Company,
	)
	return i, err
}

const updateCallEng = `-- name: UpdateCallEng :one
UPDATE calls
SET eng_check_id=$1, eng_check_datetime_at=NOW()
WHERE id_call=$2
RETURNING id_call, eng_check_id, eng_check_datetime_at
`

type UpdateCallEngParams struct {
	EngCheckID int32 `json:"eng_check_id"`
	IDCall     int64 `json:"id_call"`
}

type UpdateCallEngRow struct {
	IDCall             int64     `json:"id_call"`
	EngCheckID         int32     `json:"eng_check_id"`
	EngCheckDatetimeAt time.Time `json:"eng_check_datetime_at"`
}

func (q *Queries) UpdateCallEng(ctx context.Context, arg UpdateCallEngParams) (UpdateCallEngRow, error) {
	row := q.db.QueryRowContext(ctx, updateCallEng, arg.EngCheckID, arg.IDCall)
	var i UpdateCallEngRow
	err := row.Scan(&i.IDCall, &i.EngCheckID, &i.EngCheckDatetimeAt)
	return i, err
}

const updateCallLog = `-- name: UpdateCallLog :one
UPDATE calls
SET log_check_id=$1, log_check_datetime_at=NOW()
WHERE id_call=$2
RETURNING id_call, log_check_id, log_check_datetime_at
`

type UpdateCallLogParams struct {
	LogCheckID int32 `json:"log_check_id"`
	IDCall     int64 `json:"id_call"`
}

type UpdateCallLogRow struct {
	IDCall             int64     `json:"id_call"`
	LogCheckID         int32     `json:"log_check_id"`
	LogCheckDatetimeAt time.Time `json:"log_check_datetime_at"`
}

func (q *Queries) UpdateCallLog(ctx context.Context, arg UpdateCallLogParams) (UpdateCallLogRow, error) {
	row := q.db.QueryRowContext(ctx, updateCallLog, arg.LogCheckID, arg.IDCall)
	var i UpdateCallLogRow
	err := row.Scan(&i.IDCall, &i.LogCheckID, &i.LogCheckDatetimeAt)
	return i, err
}

const updateCallManut = `-- name: UpdateCallManut :one
UPDATE calls
SET man_check_id=$1, man_check_datetime_at=NOW()
WHERE id_call=$2
RETURNING id_call, man_check_id, man_check_datetime_at
`

type UpdateCallManutParams struct {
	ManCheckID int32 `json:"man_check_id"`
	IDCall     int64 `json:"id_call"`
}

type UpdateCallManutRow struct {
	IDCall             int64     `json:"id_call"`
	ManCheckID         int32     `json:"man_check_id"`
	ManCheckDatetimeAt time.Time `json:"man_check_datetime_at"`
}

func (q *Queries) UpdateCallManut(ctx context.Context, arg UpdateCallManutParams) (UpdateCallManutRow, error) {
	row := q.db.QueryRowContext(ctx, updateCallManut, arg.ManCheckID, arg.IDCall)
	var i UpdateCallManutRow
	err := row.Scan(&i.IDCall, &i.ManCheckID, &i.ManCheckDatetimeAt)
	return i, err
}

const updateCallQuality = `-- name: UpdateCallQuality :one
UPDATE calls
SET qual_check_id=$1, qual_check_datetime_at=NOW()
WHERE id_call=$2
RETURNING id_call, qual_check_id, qual_check_datetime_at
`

type UpdateCallQualityParams struct {
	QualCheckID int32 `json:"qual_check_id"`
	IDCall      int64 `json:"id_call"`
}

type UpdateCallQualityRow struct {
	IDCall              int64     `json:"id_call"`
	QualCheckID         int32     `json:"qual_check_id"`
	QualCheckDatetimeAt time.Time `json:"qual_check_datetime_at"`
}

func (q *Queries) UpdateCallQuality(ctx context.Context, arg UpdateCallQualityParams) (UpdateCallQualityRow, error) {
	row := q.db.QueryRowContext(ctx, updateCallQuality, arg.QualCheckID, arg.IDCall)
	var i UpdateCallQualityRow
	err := row.Scan(&i.IDCall, &i.QualCheckID, &i.QualCheckDatetimeAt)
	return i, err
}
